{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/maximepalmino/Documents/02 - Personal/Playground_Dev/NextCourse/NextJS-Meet-up-App-Mongodb/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst MeetupDetails = props => {\n  const deleteMeetupHandler = async () => {\n    // console.log(enteredMeetUpDatas)\n    const response = await fetch('/api/delete-meetup', {\n      method: 'DELETE',\n      body: JSON.stringify(enteredMeetUpDatas),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    router.push('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      img: props.meetupData.image,\n      title: props.meetupData.title,\n      adress: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Maxime:6RN1OGFFw5mGPuTz@cluster0.wxoqi.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // Fetch data for a single meetup\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://Maxime:6RN1OGFFw5mGPuTz@cluster0.wxoqi.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/maximepalmino/Documents/02 - Personal/Playground_Dev/NextCourse/NextJS-Meet-up-App-Mongodb/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","deleteMeetupHandler","response","fetch","method","body","JSON","stringify","enteredMeetUpDatas","headers","data","json","console","log","router","push","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAqC,SAArC;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAE/B,QAAMC,mBAAmB,GAAG,YAAY;AACtC;AACQ,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAD,EAAuB;AAC/CC,MAAAA,MAAM,EAAE,QADuC;AAE/CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,kBAAf,CAFyC;AAG/CC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHsC,KAAvB,CAA5B;AAOA,UAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAI,IAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ;AACH,GAZP;;AAeE,sBACI;AAAA,2BAEI,QAAC,YAAD;AAAc,MAAA,GAAG,EAAEf,KAAK,CAACgB,UAAN,CAAiBC,KAApC;AAA2C,MAAA,KAAK,EAAEjB,KAAK,CAACgB,UAAN,CAAiBE,KAAnE;AAA0E,MAAA,MAAM,EAAElB,KAAK,CAACgB,UAAN,CAAiBG,OAAnG;AAA4G,MAAA,WAAW,EAAEnB,KAAK,CAACgB,UAAN,CAAiBI;AAA1I;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADJ;AAMH,CAvBD;;AAyBA,OAAO,eAAeC,cAAf,GAAgC;AAErC,QAAMC,MAAM,GAAG,MAAMzB,WAAW,CAAC0B,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAsCC,OAAtC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEE,SAAO;AACPC,IAAAA,QAAQ,EAAE,KADH;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADJ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAQD;AAEH,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC9C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMzB,WAAW,CAAC0B,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAE/B,QAAQ,CAACuC,QAAD;AAAd,GAA1B,CAA7B;AACAzB,EAAAA,OAAO,CAACC,GAAR,CAAY4B,cAAZ;AACAnB,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACH/B,IAAAA,KAAK,EAAE;AACHgB,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVpB,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KAFZ;AAGVC,QAAAA,OAAO,EAAEsB,cAAc,CAACtB,OAHd;AAIVF,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAJZ;AAKVG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALlB;AADT;AADJ,GAAP;AAWC;AAED,eAAerB,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport { MongoClient, ObjectId} from 'mongodb'\n\nconst MeetupDetails = (props) => {\n\n  const deleteMeetupHandler = async () => {\n    // console.log(enteredMeetUpDatas)\n            const response = await fetch('/api/delete-meetup', {\n                method: 'DELETE',\n                body: JSON.stringify(enteredMeetUpDatas),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            const data = await response.json()\n            console.log(data)\n            router.push('/')\n        }\n    \n\n    return(\n        <>\n        \n            <MeetupDetail img={props.meetupData.image} title={props.meetupData.title} adress={props.meetupData.address} description={props.meetupData.description} />\n        </>\n    )\n}\n\nexport async function getStaticPaths() {\n\n  const client = await MongoClient.connect('mongodb+srv://Maxime:6RN1OGFFw5mGPuTz@cluster0.wxoqi.mongodb.net/meetups?retryWrites=true&w=majority')\n  const db = client.db()\n  const meetupsCollection = db.collection('meetups')\n  const meetups = await meetupsCollection.find({}, { _id: 1}).toArray() \n  client.close()\n\n    return {\n    fallback: false,\n      paths: meetups.map((meetup) => ({\n        params: {\n          meetupId: meetup._id.toString()\n        } \n      }))\n    };\n  }\n\nexport async function getStaticProps(context) {\n// Fetch data for a single meetup\n\nconst meetupId = context.params.meetupId\nconst client = await MongoClient.connect('mongodb+srv://Maxime:6RN1OGFFw5mGPuTz@cluster0.wxoqi.mongodb.net/meetups?retryWrites=true&w=majority')\nconst db = client.db()\nconst meetupsCollection = db.collection('meetups')\nconst selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId) })\nconsole.log(selectedMeetup)\nclient.close()\n\nreturn {\n    props: {\n        meetupData: {\n          id: selectedMeetup._id.toString(),\n          title: selectedMeetup.title,\n          address: selectedMeetup.address,\n          image: selectedMeetup.image,\n          description: selectedMeetup.description\n        }\n    }\n}\n}\n\nexport default MeetupDetails"]},"metadata":{},"sourceType":"module"}